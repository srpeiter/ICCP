//============================================================================
// Name        : renderingtest.cpp
// Author      : Sarwan Peiter
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <GL/glew.h>
#include <GL/gl.h>
//#include <GL/freeglut.h>
#include <GLFW/glfw3.h>
#include <stdio.h>

using namespace std;


#include <GLFW/glfw3.h>

int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);



    glfwSetInputMode(window, GLFW_STICKY_KEYS, GL_TRUE);

    do{
        // Draw nothing, see you in tutorial 2 !

		GLenum res = glewInit();
		if (res != GLEW_OK)
		{
		    fprintf(stderr, "Error: '%s'\n", glewGetErrorString(res));
		    return 1;
		}
		struct pos {
			float x ;
			float y ;
			float z ;
		};

		pos pos1;
		pos1.x= -1.0; pos1.y= -1.0; pos1.z = 0.0;

		pos pos2;
		pos2.x= 1.0; pos2.y= -1.0; pos2.z = 0.0;

		pos pos3;
		pos3.x= 0.0; pos3.y= 1.0; pos3.z = 0.0;


		pos Vertices[3] = {pos1, pos2, pos3} ;


	    GLuint VBO;

		glGenBuffers(1, &VBO);

		glBindBuffer(GL_ARRAY_BUFFER, VBO);

		glBufferData(GL_ARRAY_BUFFER, sizeof(Vertices), Vertices, GL_STATIC_DRAW);

		glEnableVertexAttribArray(0);

		glBindBuffer(GL_ARRAY_BUFFER, VBO);


		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);

		glDrawArrays(GL_TRIANGLES, 0, 3);

		glDisableVertexAttribArray(0);

        // Swap buffers
        glfwSwapBuffers(window);
        glfwPollEvents();

    } // Check if the ESC key was pressed or the window was closed
    while( glfwGetKey(window, GLFW_KEY_ESCAPE ) != GLFW_PRESS &&
    glfwWindowShouldClose(window) == 0 );



    return 0;
}




