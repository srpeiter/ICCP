//============================================================================
// Name        : renderingtest.cpp
// Author      : Sarwan Peiter
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <GL/glew.h>
#include <GL/gl.h>
#include <GL/glext.h>
//#include <GL/freeglut.h>
#include <GLFW/glfw3.h>
#include <stdio.h>

using namespace std;


#include <stdlib.h>
#include <stdio.h>
static void error_callback(int error, const char* description)
{
    fputs(description, stderr);
}
static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, GL_TRUE);
}


struct col {
	float r;
	float g;
	float b;
};


int main(void)
{

	// ----------make opengl window context-----------------------------
    GLFWwindow* window;
    glfwSetErrorCallback(error_callback);
    if (!glfwInit())
        exit(EXIT_FAILURE);
    window = glfwCreateWindow(640, 480, "Simple example", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        exit(EXIT_FAILURE);
    }

    // make current window OPENGL context or else OPENGL will not work
    glfwMakeContextCurrent(window);

    // time interval at which the render buffer(back buffer) is brought to the front buffer
    glfwSwapInterval(1);

    //terminate when escape-key is pressed
    glfwSetKeyCallback(window, key_callback);

    int width, height;

    // start rendering

    //------------------------------rendering------------------
    while (!glfwWindowShouldClose(window))

    {

        glfwGetFramebufferSize(window, &width, &height); // not important

        glViewport(0, 0, width, height);  // view settings

        glClear(GL_COLOR_BUFFER_BIT);

        float maxSize = 0.0f;
          glGetFloatv( GL_POINT_SIZE_MAX_ARB, &maxSize );
          glPointParameterfARB(GL_POINT_SIZE_MAX_ARB, maxSize);
          glPointParameterfARB(GL_POINT_SIZE_MIN_ARB, 1.0f);
          glTexEnvf(GL_POINT_SPRITE_ARB, GL_COORD_REPLACE_ARB, GL_TRUE);

          glEnable(GL_POINT_SPRITE_ARB);
          glEnable(GL_TEXTURE_2D);       // point sprite texture support
          glEnable(GL_BLEND);            // soft blending of point sprites
          glBlendFunc(GL_SRC_ALPHA, GL_ONE);





          glPointSize(4);
          glBegin(GL_POINTS);

          col.r=  1;
          col.g = 1;
          col.b = 1;
          for (int i=1; i<num; ++i)
          {
            const Vec2D &pos = pStars[i].m_pos;
            const Color &col = ColorFromTemperature(pStars[i].m_temp);
            if (m_starRenderType==1)
            {
              glColor3f(col.r * pStars[i].m_mag,
                        col.g * pStars[i].m_mag,
                        col.b * pStars[i].m_mag);
            }
            glVertex3f(pos.x, pos.y, 0.0f);

          }
          glEnd();

          glDisable(GL_POINT_SPRITE_ARB);
          glDisable(GL_BLEND);
        glfwSwapBuffers(window);
        glfwPollEvents();
    }
    glfwDestroyWindow(window);
    glfwTerminate();
    exit(EXIT_SUCCESS);
}
