//============================================================================
// Name        : renderingtest.cpp
// Author      : Sarwan Peiter
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <GL/glew.h>
#include <GL/gl.h>
//#include <GL/freeglut.h>
#include <GLFW/glfw3.h>
#include <stdio.h>

using namespace std;


#include <GLFW/glfw3.h>

int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
    	glutInitDisplayMode(GLUT_RGB);
    		GLenum res = glewInit();
    		if (res != GLEW_OK)
    		{
    		    fprintf(stderr, "Error: '%s'\n", glewGetErrorString(res));
    		    return 1;
    		}


    		float Vertices[3] = {0.0f, 0.0f, 0.0f};

    		GLuint VBO;

    		glGenBuffers(1, &VBO);

    		glBindBuffer(GL_ARRAY_BUFFER, VBO);

    		glBufferData(GL_ARRAY_BUFFER, sizeof(Vertices), Vertices, GL_STATIC_DRAW);

    		glEnableVertexAttribArray(0);

    		glBindBuffer(GL_ARRAY_BUFFER, VBO);


    		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);

    		glDrawArrays(GL_POINTS, 0, 1);

    		glDisableVertexAttribArray(0);


        /* Swap front and back buffers */
        glfwSwapBuffers(window);

        /* Poll for and process events */
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}




